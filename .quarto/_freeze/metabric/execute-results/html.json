{
  "hash": "e4030734cabdaafafe380a5242caf2c6",
  "result": {
    "markdown": "# METABRIC\n\n## Packages to use\n\nFirst load the packages that will be used along the cleaning\nprocess. Always do this at the beginning of your script to make\nthings organized. \n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DESeq2)\nlibrary(GEOquery)\nlibrary(SummarizedExperiment)\n\nlibrary(dplyr)\n```\n:::\n\n\n## Introduction\n\nTo download the clinical data and expression levels from the METABRIC cohort\ngo to cbioportal and select the respective cohort (METABRIC):\nhttps://www.cbioportal.org/\n\nHere we will load and format the metabric data in the same way as\nSCAN-B and the AI dataset, \nso it is standardized and better to use in future analysis. \nFor this, we use the summarized experiment object to store expression data\nand clinical information.\n\n## Downloading data \n\nLoading gene expression levels. \n\n::: {.cell}\n\n```{.r .cell-code}\nexpression_data <- read.csv(\n    \"data_mrna_agilent_microarray.txt\",\n    sep = \"\\t\",\n    check.names = FALSE\n) %>% dplyr::mutate(Entrez_Gene_Id = NULL) %>%\n    `colnames<-`(stringr::str_replace_all(colnames(.), stringr::fixed(\".\"), \"-\"))\n\ndim(expression_data)\n```\n:::\n\nWe note that the first two columns correspond to HUGO symbol and ENTREZ ID.\n\nLoad now clinical data.\n\n::: {.cell}\n\n```{.r .cell-code}\nclinical_data <- read.csv(\n    \"data_clinical_patient.txt\",\n    sep = \"\\t\",\n    comment.char = \"#\"\n)\n\nglimpse(clinical_data)\n```\n:::\n\n## Cleaning and integrating\n\nWe see that there are over 2500 rows, meaning that we have more patients with\nclinical data than expression levels. Let us now select patients that have\nexpression levels.\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(unique(clinical_data$PATIENT_ID)) == nrow(clinical_data)\n```\n:::\n\nWe see that each row has a unique identifier, the patient ID, so we set\nthis as a rowname.\n\n::: {.cell}\n\n```{.r .cell-code}\nrownames(clinical_data) <- clinical_data$PATIENT_ID\n```\n:::\n\nAnd we check if all patients from expression data have clinical data.\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(\n    intersect(\n        clinical_data$PATIENT_ID, \n        colnames(expression_data[, -c(1,2)])\n    )\n) == ncol(expression_data)-2\n```\n:::\n\nIndeed it has, therefore we can just subselect clinical data.\n\n::: {.cell}\n\n```{.r .cell-code}\nduplicated_genes <- expression_data$Hugo_Symbol[\n    duplicated(expression_data$Hugo_Symbol)\n]\n\nhugo_symbols_duplicated <- expression_data$Hugo_Symbol[\n    duplicated(expression_data$Hugo_Symbol)\n] %>% unique\n\nmedian_genes <- sapply(\n    hugo_symbols_duplicated,\n    function(gene, df){\n        df %>% dplyr::filter(Hugo_Symbol == gene) %>%\n            dplyr::mutate(Hugo_Symbol = NULL) %>%\n            as.matrix(.) %>%\n            MatrixGenerics::colMedians(.)\n    },\n    df = expression_data\n)\n\nmetabric_exp <- expression_data[!duplicated(expression_data$Hugo_Symbol), ]\nrownames(metabric_exp) <- expression_data$Hugo_Symbol[\n    !duplicated(expression_data$Hugo_Symbol)\n]\nmetabric_exp$Hugo_Symbol <- NULL\nmetabric_exp[colnames(median_genes), ] <- median_genes %>% t\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclinical_data <- clinical_data[\n    intersect(colnames(metabric_exp), rownames(clinical_data)), \n]\n```\n:::\n\nBefore we just average the duplicated genes median intensity. \n\n::: {.cell}\n\n```{.r .cell-code}\n# add new clinical data to the summarized experiment object.\nmetabric <- SummarizedExperiment::SummarizedExperiment(\n    assays = list(\n        median_intensity = metabric_exp[, rownames(clinical_data)]\n    ), \n    colData = clinical_data\n)\n```\n:::\n\nAnd we can finally save the RDS file to load it up faster later. \n\n::: {.cell}\n\n```{.r .cell-code}\n# save the final dataset\nsaveRDS(\n    metabric, \n    file = file.path(\"metabric_filtered.rds\")\n)\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}