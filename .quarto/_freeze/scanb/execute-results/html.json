{
  "hash": "df0e71f3e948d5ec8d0cacad39ac347d",
  "result": {
    "markdown": "# SCANB\n\n## Packages to use\n\nFirst load the packages that will be used along the cleaning\nprocess. Always do this at the beginning of your script to make\nthings organized. \n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DESeq2)\nlibrary(GEOquery)\nlibrary(SummarizedExperiment)\n\nlibrary(dplyr)\n```\n:::\n\n## Introduction\n\nSCAN-B is an early stage breast cancer cohort from Sweden. Clinical and \ngene expression level data is available for several patients. \n\nTo download the gene expression levels, one can check in the GEO database\nunder the accession code GSE96058. One can download the \nclinical data in their mutation explorer tool found here: \nhttps://oncogenomics.bmc.lu.se/MutationExplorer/\n\n## Downloading data\n\nWe downloaded the clinical data from SCAN-B website and the \nexpression matrix (FPKM) from the GEO website using accession code\nGSE96058.\n\n::: {.cell}\n\n```{.r .cell-code}\nsweden_clin_data <- read.table(\n    \"data/clinical_data.tsv\",\n    header = TRUE,\n    sep = \"\\t\"\n)\n\nglimpse(sweden_clin_data)\n```\n:::\n\nLoading the gene expression levels.\n\n::: {.cell}\n\n```{.r .cell-code}\ngene_expression_levels <- read.table(\n    paste0(\n        \"data/\",\n        \"GSE96058_gene_expression_3273_samples_and_136_replicates_transformed.csv\"), \n    sep = \",\",\n    header = TRUE,\n    row.names = 1\n)\n```\n:::\n\nWe check the dimension of the dataset.\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(gene_expression_levels)\n```\n:::\n\nNow we fetch the clinical data from the GEO database.\n\n::: {.cell}\n\n```{.r .cell-code}\ngse <- getGEO(\n    GEO = \"GSE96058\", \n    GSEMatrix = TRUE, \n    destdir = \"./data\"\n)\n\npheno_data <- pData(gse[[\"GSE96058-GPL11154_series_matrix.txt.gz\"]])\n```\n:::\n\n## Cleaning and integrating\n\nWe remove the samples with the replicate in the name, as these \nwon't be necessary for the analysis.\n\n::: {.cell}\n\n```{.r .cell-code}\ngene_no_replicates <- gene_expression_levels[\n    , \n    !grepl(colnames(gene_expression_levels), pattern = \"repl\")\n]\n\n# select only patients that have clinical information\ngene_no_replicates <- gene_no_replicates[\n    , \n    intersect(colnames(gene_no_replicates), pheno_data$title)\n]\n```\n:::\n\nAnd then we need to match the columns from the clinical data with the \ngene expression levels.\n\n::: {.cell}\n\n```{.r .cell-code}\n# subselect clinical data and change row names to match column names\n# from expression levels. We will create then a summarized experiment\n# table. \npheno_data_sub <- pheno_data[\n    match(colnames(gene_no_replicates), pheno_data$title), \n]\n\n# check if expression levels number of columns and number of rows have the\n# same patients\nlength(intersect(colnames(gene_no_replicates), pheno_data_sub$title)) ==\n  ncol(gene_no_replicates)\n\nrownames(pheno_data_sub) <- pheno_data_sub$title\n```\n:::\n\nAnd now we can merge the downloaded clinical data.\n\n::: {.cell}\n\n```{.r .cell-code}\n# first we will fetch the pheno data downloaded from the scan-b mutation\n# explorer\nscanb_id <- sapply(\n    pheno_data_sub[, \"scan-b external id:ch1\"], \n    stringr::str_extract,\n    pattern = \"S.*\\\\.g\"\n)\n\npheno_data_sub$scanb_id <- scanb_id\n\n# subselect patients that are in both datasets\nscanb_both <- intersect(scanb_id, sweden_clin_data$SAMPLE)\n\n# subselect now \npheno_data_subsub <- pheno_data_sub %>% \n  dplyr::filter(scanb_id %in% scanb_both)\n\ndim(pheno_data_subsub)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# we now subselect the rows from sweden_clin_data using the scanb_id\nsweden_clin_data_sub <- sweden_clin_data %>% \n    dplyr::filter(SAMPLE %in% scanb_both)\n\n# add filename F* as a column name\nname_expression <- sapply(\n    sweden_clin_data_sub$SAMPLE,\n    function(x){\n        pheno_data_subsub[which(x == pheno_data_subsub$scanb_id), \"title\"]\n    }\n)\n\nlength(unique(name_expression)) == nrow(pheno_data_subsub)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsweden_clin_data_sub$name_expression <- name_expression\nrownames(sweden_clin_data_sub) <- sweden_clin_data_sub$name_expression\n```\n:::\n\nAnd as with the AI dataset, we create a SummarizedExperiment object\nto save the data and use it later in the downstream analysis.\n\n::: {.cell}\n\n```{.r .cell-code}\n# add new clinical data to the summarized experiment object.\nsweden_df <- SummarizedExperiment::SummarizedExperiment(\n    assays = list(logFPKM = gene_no_replicates[, rownames(sweden_clin_data_sub)]), \n    colData = sweden_clin_data_sub\n)\n\n# save the final dataset\nsaveRDS(\n    sweden_df, \n    file = file.path(\"data/sweden_df_filtered.rds\")\n)\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}