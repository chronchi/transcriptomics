---
title: "Untitled"
---

## Loading packages

```{r}
library(pacman)

pacman::p_load(
    dplyr,
    
    SummarizedExperiment
)
```


## Loading the datasets

```{r}
metabric <- readRDS("../../../../BioRepo/Data/20210713_metabric/metabric_filtered.rds")
```

```{r}
scanb <- readRDS("~/Documents/brisken-lab/BioRepo/Data/20170309_GSE96058/sweden_df_filtered.rds")
```

```{r}
common_genes <- intersect(rownames(metabric), rownames(scanb))
scanb <- scanb[common_genes,]
metabric <- metabric[common_genes]

metabric_rank <- apply(assay(metabric,"median_intensity"), 2, rank)
scanb_rank <- apply(assay(scanb,"logFPKM"), 2, rank)
```


## Loading the gene list

```{r}
gene_list <- read.table("../data/gene_list.txt", sep = "|", header = TRUE)
gene_list %>% head
```


## Loading the assigned classes

```{r}
classes_metabric <- read.table("../data/metabric_subtypes.txt") %>%
    `colnames<-`(c("name_patient", "cohort", "subtype")) %>%
    dplyr::mutate(name_patient = stringr::str_replace(name_patient, "\\.", "-"))

classes_metabric %>% head
```

## Running k-means

We now run k-means with $k=3$ to see if we can recapitulate the clusters done
in the paper. We calculate normalized rank of the 60 genes and use it 
to calculate the k-means. 

```{r}
ilc_metabric <- colData(metabric) %>% data.frame %>% 
    dplyr::filter(HISTOLOGICAL_SUBTYPE == "Lobular")
```

Out of the 60 genes, 54 are available. We will use those instead. 

```{r}
available_genes <- intersect(metabric_rank %>% rownames, gene_list$symbol)
```

```{r}
ilc_metabric <- metabric[
    available_genes, 
    rownames(ilc_metabric)
]
```

```{r}
set.seed(92183)
metabric_ilc_kmeans <- stats::kmeans(
    t(metabric_rank[rownames(ilc_metabric), colnames(ilc_metabric)]/nrow(metabric)), 
    centers = 3
)

metabric_ilc_kmeans$cluster %>% table
```

```{r}
predict_kmeans <- function(object, newdata){
    centers <- object$centers
    n_centers <- nrow(centers)
    dist_mat <- as.matrix(dist(rbind(centers, newdata)))
    dist_mat <- dist_mat[-seq(n_centers), seq(n_centers)]
    max.col(-dist_mat)
}
```

And now we calculate for scanb as well.

```{r}
ilc_scanb <- colData(scanb) %>% data.frame %>% dplyr::filter(
    Histological_Type == "Lobular"
)
ilc_scanb <- scanb[
    rownames(ilc_metabric), 
    ilc_scanb$name_expression
]
```

```{r}
classes_ilc_scanb <- predict_kmeans(
    metabric_ilc_kmeans,
    t(scanb_rank[rownames(ilc_scanb), colnames(ilc_scanb)]/nrow(scanb))
)
```

```{r}
classes_ilc_scanb %>% table
```

And doing the PCA for the scanb samples.

```{r}
pca_scanb <- PCAtools::pca(
    assay(ilc_scanb, "logFPKM"),
    metadata = colData(ilc_scanb) %>% data.frame %>% 
            dplyr::mutate(
                cluster = as.character(
                    classes_ilc_scanb
                )
            )
    )
```

```{r}
pca_biplot_scanb_from_metabric <- PCAtools::biplot(
    pca_scanb,
    colby = "cluster",
    lab = NULL, 
    legendPosition = "right",
    x = "PC1",
    y = "PC2",
    title = "Cohort: SCANB\nUsing centers from kmeans done on METABRIC"
)
pca_biplot_scanb_from_metabric
```

And if we do k-means once again for scanb instead. 

```{r}
scanb_ilc_kmeans <- stats::kmeans(
    t(scanb_rank[rownames(ilc_scanb), colnames(ilc_scanb)]/nrow(scanb)), 
    centers = 3
)
```

```{r}
pca_scanb$metadata$cluster_kmeans <- as.character(
    scanb_ilc_kmeans$cluster[rownames(pca_scanb$metadata)]
)
```


```{r}
pca_biplot_kmeans <- PCAtools::biplot(
    pca_scanb,
    colby = "cluster_kmeans",
    lab = NULL, 
    legendPosition = "right",
    x = "PC1",
    y = "PC2",
    title = "Cohort: SCANB\nUsing kmeans directly on SCANB"
)

pca_biplot_kmeans
```

```{r, fig.width=16}
cowplot::plot_grid(
    pca_biplot_scanb_from_metabric,
    pca_biplot_kmeans
)
```

The clusters seem to match overall. 


## Saving the results

We now save into an excel file the classes. 

```{r}
clusters <- list()
clusters$metabric <- data.frame(
    name_patient = names(metabric_ilc_kmeans$cluster),
    cluster = metabric_ilc_kmeans$cluster
)
clusters$scanb <- data.frame(
    name_patient = colnames(ilc_scanb),
    cluster = classes_ilc_scanb
)
```


```{r}
writexl::write_xlsx(x = clusters, path = "../data/clusters.xlsx")
```


