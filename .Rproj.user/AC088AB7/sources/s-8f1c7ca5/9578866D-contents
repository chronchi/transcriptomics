---
author: "Carlos"
date: "2021-02-09"
output: html_document
knit: (function(inputFile, encoding) { 
      out_dir <- '../results/output_filter_data_md';
      rmarkdown::render(inputFile,
                        encoding=encoding, 
                        output_file=file.path(dirname(inputFile), out_dir, 'filter_data.html')) })
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(include = TRUE, error = FALSE, message = FALSE, warning = FALSE)

# define the BioRepo base path in personal computer
biorepo_base_path <- file.path("~", "Documents", "brisken-lab", "BioRepo")
knitr::opts_knit$set(root.dir = biorepo_base_path)
```

# Loading and formatting the SCAN-B (GSE96058)

We downloaded the clinical data from SCAN-B website and the 
expression matrix (FPKM) from the GEO website using accession code
GSE96058

```{r}
library(DESeq2)
library(dplyr)
library(ggplot2)
library(TCGAbiolinks)
library(singscore)
library(GEOquery)
```


```{r}
sweden_clin_data <- read.table(
  "Data/20170309_GSE96058/clinical_data.tsv",
  header = TRUE,
  sep = "\t"
)

glimpse(sweden_clin_data)
```

Loading the gene expression levels.

```{r}
gene_expression_levels <- read.table(
  paste0("Data/20170309_GSE96058/",
  "GSE96058_gene_expression_3273_samples_and_136_replicates_transformed.csv"), 
  sep = ",",
  header = TRUE,
  row.names = 1
)
```

```{r}
dim(gene_expression_levels)
```

```{r}
gse <- getGEO(GEO = "GSE96058", GSEMatrix = TRUE, destdir = "Data/20170309_GSE96058")
show(gse)
```

From this data 

```{r}
pheno_data <- pData(gse[["GSE96058-GPL11154_series_matrix.txt.gz"]])

head(pheno_data)
```


```{r}
gene_no_replicates <- gene_expression_levels[, 
  !grepl(colnames(gene_expression_levels), pattern = "repl")
]

dim(gene_no_replicates)

# select only patients that have clinical information
gene_no_replicates <- gene_no_replicates[, 
  intersect(colnames(gene_no_replicates), pheno_data$title)
]

dim(gene_no_replicates)
```

```{r}
# subselect clinical data and change row names to match column names
# from expression levels. We will create then a summarized experiment
# table. 

pheno_data_sub <- pheno_data[
  match(colnames(gene_no_replicates), pheno_data$title), 
]

dim(pheno_data_sub)
length(intersect(colnames(gene_no_replicates), pheno_data_sub$title)) ==
  ncol(gene_no_replicates)

rownames(pheno_data_sub) <- pheno_data_sub$title
```

```{r}
# first we will fetch the pheno data downloaded from the scan-b mutation
# explorer
scanb_id <- sapply(
  pheno_data_sub[, "scan-b external id:ch1"], 
  stringr::str_extract,
  pattern = "S.*\\.g"
)

pheno_data_sub$scanb_id <- scanb_id

# subselect patients that are in both datasets
scanb_both <- intersect(scanb_id, sweden_clin_data$SAMPLE)

# subselect now 
pheno_data_subsub <- pheno_data_sub %>% 
  dplyr::filter(scanb_id %in% scanb_both)

dim(pheno_data_subsub)
```

```{r}
# we now subselect the rows from sweden_clin_data using the scanb_id
sweden_clin_data_sub <- sweden_clin_data %>% 
  dplyr::filter(SAMPLE %in% scanb_both)

# add filename F* as a column name
name_expression <- sapply(
  sweden_clin_data_sub$SAMPLE,
  function(x){
    pheno_data_subsub[which(x == pheno_data_subsub$scanb_id), "title"]
  }
)

length(unique(name_expression)) == nrow(pheno_data_subsub)
```

```{r}
sweden_clin_data_sub$name_expression <- name_expression
rownames(sweden_clin_data_sub) <- sweden_clin_data_sub$name_expression
```

```{r}
# add new clinical data to the summarized experiment object.
sweden_df <- SummarizedExperiment::SummarizedExperiment(
  assays = list(logFPKM = gene_no_replicates[, rownames(sweden_clin_data_sub)]), 
  colData = sweden_clin_data_sub
)
```

```{r}
assay(sweden_df, "rank") <- singscore::rankGenes(assay(sweden_df, "logFPKM"))
```

```{r}
# save the final dataset
saveRDS(
    sweden_df, 
    file = file.path("Data/20170309_GSE96058/sweden_df_filtered.rds")
)
```

