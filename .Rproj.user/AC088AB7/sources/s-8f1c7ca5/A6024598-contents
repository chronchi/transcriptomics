---
author: "Carlos"
date: "2021-02-09"
output: html_document
knit: (function(inputFile, encoding) { 
      out_dir <- '../results/output_filter_data_md';
      rmarkdown::render(inputFile,
                        encoding=encoding, 
                        output_file=file.path(dirname(inputFile), out_dir, 'filter_data.html')) })
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(include = TRUE, error = FALSE, message = FALSE, warning = FALSE)

# define the BioRepo base path in personal computer
biorepo_base_path <- file.path("~", "Documents", "brisken-lab", "BioRepo")
knitr::opts_knit$set(root.dir = biorepo_base_path)
```

# Loading and formatting the METABRIC dataset

We downloaded the clinical data and expression levels from the METABRIC cohort
using the following link: https://cbioportal-datahub.s3.amazonaws.com/brca_metabric.tar.gz 
on 2021-07-13 at 15:20. 

Here we will load and format the metabric data in the same way as TCGA BRCA
and SCAN-B, so it is standardized and better to use in future analysis. 
For this, we use the summarized experiment object to store expression data
and clinical information.

```{r}
library(dplyr)
library(ggplot2)
library(TCGAbiolinks)
library(singscore)
library(GEOquery)

library(SummarizedExperiment)
```

Loading gene expression levels. 
```{r}
expression_data <- read.csv(
  "Data/20210713_metabric/data_mRNA_median_all_sample_Zscores.txt",
  sep = "\t",
  check.names = FALSE
)

dim(expression_data)
```

We note that the first two columns correspond to HUGO symbol and ENTREZ ID.

Since genes were znormalized, we select the first appearance in the list
of genes that are duplicated.

```{r}
expression_data <- expression_data[!duplicated(expression_data$Hugo_Symbol), ]
```

Load now clinical data.

```{r}
clinical_data <- read.csv(
  "Data/20210713_metabric/data_clinical_patient.txt",
  sep = "\t",
  comment.char = "#"
)

glimpse(clinical_data)
```

We see that there are over 2500 rows, meaning that we have more patients with
clinical data than expression levels. Let us now select patients that have
expression levels.

```{r}
length(unique(clinical_data$PATIENT_ID)) == nrow(clinical_data)
```

We see that each row has a unique identifier, the patient ID, so we set
this as a rowname.

```{r}
rownames(clinical_data) <- clinical_data$PATIENT_ID
```

And we check if all patients from expression data have clinical data.

```{r}
length(intersect(clinical_data$PATIENT_ID, colnames(expression_data[, -c(1,2)]))) ==
  ncol(expression_data)-2
```

Indeed it has, therefore we can just subselect clinical data and create the 
file like TCGA and SCAN-B.

```{r}
clinical_data <- clinical_data[colnames(expression_data[, -c(1,2)]), ]
rownames(expression_data) <- expression_data$Hugo_Symbol
row_ranges <- expression_data[, c(1,2)]
expression_data <- expression_data[, -c(1,2)]
```

```{r}
metabric_intensity_values <- read.delim(
    "Data/20210713_metabric/data_expression_median.txt",
    sep = "\t",
    header = TRUE
) %>% dplyr::mutate(Entrez_Gene_Id = NULL) %>%
    `colnames<-`(stringr::str_replace_all(colnames(.), stringr::fixed("."), "-"))
```

Before we just average the duplicated genes median intensity. 

```{r}
duplicated_genes <- metabric_intensity_values$Hugo_Symbol[duplicated(metabric_intensity_values$Hugo_Symbol)]
median_genes <- sapply(
    metabric_intensity_values$Hugo_Symbol[
        duplicated(metabric_intensity_values$Hugo_Symbol)
    ] %>% unique,
    function(gene, df){
        df %>% dplyr::filter(Hugo_Symbol == gene) %>%
            dplyr::mutate(Hugo_Symbol = NULL) %>%
            as.matrix(.) %>%
            MatrixGenerics::colMedians(.)
    },
    df = metabric_intensity_values
)

metabric_exp <- metabric_intensity_values
metabric_exp <- metabric_exp[!duplicated(metabric_exp$Hugo_Symbol), ]
rownames(metabric_exp) <- metabric_exp$Hugo_Symbol
metabric_exp$Hugo_Symbol <- NULL
metabric_exp[colnames(median_genes), ] <- median_genes %>% t
```

```{r}
# add new clinical data to the summarized experiment object.
metabric <- SummarizedExperiment::SummarizedExperiment(
    assays = list(
        zscores = expression_data, 
        median_intensity = metabric_exp[
            rownames(expression_data), 
            colnames(expression_data)
        ]
    ), 
    colData = clinical_data
)
```

Add ranking of the genes.
```{r}
assay(metabric, "rank") <- singscore::rankGenes(assay(metabric, "median_intensity"))
```

Load also the median intensity values as well.

```{r}
# save the final dataset
saveRDS(
    metabric, 
    file = file.path("Data/20210713_metabric/metabric_filtered.rds")
)
```

```{r}
write.csv(x = row_ranges, file = "Data/20210713_metabric/HUGO_ENTREZ.csv", row.names = FALSE)
```

